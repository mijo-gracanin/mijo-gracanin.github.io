<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>MijoCoder</title><description>A personal web page of Mijo Graƒçanin</description><link>https://mijo-gracanin.github.io</link><language>en</language><lastBuildDate>Fri, 30 Dec 2022 00:01:57 +0100</lastBuildDate><pubDate>Fri, 30 Dec 2022 00:01:57 +0100</pubDate><ttl>250</ttl><atom:link href="https://mijo-gracanin.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://mijo-gracanin.github.io/posts/core-data-programmatically</guid><title>Creating CoreData model programmatically</title><description>Replacing xcdatamodeld with NSManagedObjectModel</description><link>https://mijo-gracanin.github.io/posts/core-data-programmatically</link><pubDate>Sat, 26 Nov 2022 13:00:00 +0100</pubDate><content:encoded><![CDATA[<h1>Creating CoreData model programmatically</h1><p>CoreData model can be created programmatically with NSManagedObjectModel class.</p><p>I'll demonstrate the programmatic approach to a CoreData model with <a href="https://github.com/mijo-gracanin/CoreDataProgrammatically">the project</a></p><p>The project is based on the iOS App template with CoreData. <br/> In the second commit, I added entities to the xcdatamodeld file. <br/> In the third commit, I created NSManagedObject subclasses by opening the xcdatamodeld file and selecting <code>Editor &gt; Create NSManagedObject Subclass‚Ä¶</code>, then I deleted the xcdatamodeld in the <code>Persistence.swift</code> and created the NSManagedObjectModel object and its entities.</p><p>Nothing complicated of course, but it's hard to find a sample code regarding NSManagedObjectModel online. If you need to create NSManagedObject subclasses in Objective C, but your project also supports Swift, then you must create the subclasses manually, or create a new Objective C project to generate subclasses.</p><h2>xcdatamodeld vs NSManagedObjectModel</h2><p>It's hard to justify the programmatic approach since it requires a lot of boilerplate code. If you need to use cmake for project generation, it might be easier to work with a source file than with xcdatamodeld, a "special" type of folder.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://mijo-gracanin.github.io/posts/blogging-with-publish</guid><title>Blogging with Publish</title><description>Experience in using Publish</description><link>https://mijo-gracanin.github.io/posts/blogging-with-publish</link><pubDate>Sat, 8 Jan 2022 13:14:00 +0100</pubDate><content:encoded><![CDATA[<h1>Blogging with Publish</h1><p><a href="https://github.com/JohnSundell/Publish">Publish</a> is a static site generator written in Swift üéâ, thanks to <a href="https://swiftbysundell.com/">John Sundell</a> ‚ù§Ô∏è</p><p>Compared with blogging platforms like blogger.com (which I used for mijocoder.blogspot.com), it requires more involvement to create a blog, to publish something, and it has fewer features. On the other hand, you can make what's missing in Swift and have a blog without bloat code, tracking, and cookies.</p><h2>How to create a blog with Publish</h2><p>The official <a href="https://github.com/JohnSundell/Publish/blob/master/README.md">README</a> gives enough information to get started so I'll summarise steps:</p><ol><li>Setup Publish and create a project by following the official <a href="https://github.com/JohnSundell/Publish#quick-start">quick start</a>.</li><li>Open the project and run it in order to generate a site. Generated site will be in <code>Output</code> folder.</li><li>Test the site localy by running <code>publish run</code> from the project's path.</li><li>If you're satisfied with the site, deploy it! <br/> You can configure the deployment task in Publish or upload the contents of the <code>Output</code> folder to the server. One solid choice for hosting is (GitHub pages)(https://pages.github.com/). With GitHub pages, you can copy the contents of the <code>Output</code> folder to a GitHub page repository, commit &amp; push.</li></ol><h2>Blog customizations</h2><p>With a custom theme file, you can define structure and elements of the site. The easiest way to start with your custom theme is to copy:</p><p><code>Publish/Sources/Publish/API/Theme+Foundation.swift</code> into a new file:</p><p><code>MyBlog/Sources/MyBlog/Theme+MyBlog.swift</code></p><p>also copy:</p><p><code>Publish/Resources/FoundationTheme/styles.css</code> into:</p><p><code>MyBlog/Resources/MyBlogTheme/styles.css</code></p><p>finally, update relevant parts in Theme+MyBlog.swift:</p><pre><code><span class="swift_keyword">extension</span> <span class="swift_type">Theme</span> <span class="swift_keyword">where</span> <span class="swift_type">Site</span> == <span class="swift_type">MyBlog</span> {
    <span class="swift_keyword">static var</span> myBlog: <span class="swift_type">Self</span> {
        <span class="swift_type">Theme</span>(htmlFactory: <span class="swift_type">BlogHTMLFactory</span>(),
              resourcePaths: [<span class="swift_string">"Resources/MyBlogTheme/styles.css"</span>]
        )
    }
}
</code></pre><p>Now let's look into some how-tos as an appendix to the <a href="https://github.com/JohnSundell/Publish/blob/master/README.md#start-out-simple-and-customize-when-needed">official examples</a>.</p><br/><h3>Add a favicon</h3><p>A favicon is a small image of 32x32 px, usually shown along with a page name in a browser's tab. By default, the favicon's path is <code>image/favicon.png</code>, so crate the <code>image</code> folder inside the Resources folder and add a favicon.</p><br/><h3>Create an About page</h3><p>The initial project has only one section - <code>posts</code>. So let's add the <code>about</code> case to <code>SectionID</code> in <code>main.swift</code>:</p><pre><code><span class="swift_keyword">enum</span> SectionID: <span class="swift_type">String</span>, <span class="swift_type">WebsiteSectionID</span> {
    <span class="swift_comment">// Add the sections that you want your website to contain here:</span>
    <span class="swift_keyword">case</span> posts
    <span class="swift_keyword">case</span> about
}
</code></pre><p>Next, create a subfolder <code>about</code> in the <code>Content</code> folder with a <code>index.md</code> inside it. The <code>index.md</code> represents the "content". Now, what's interesting, if you add some text like:</p><pre><code># <span class="swift_type">Foo
Bar</span>
</code></pre><p>You will notice that the title of the About section in the header has changed to "Foo", and the page only shows the title "Foo". The "Bar" is not rendered. If you remove the <code># Foo</code>, the section's title becomes "index" and the page shows just "index". That's how Publish works internally - if there is no title, it makes one from the file's name.</p><p>In order to show the "Bar", replace <code>H1(section.title)</code> with <code>Div(section.body).class("content")</code> in the <code>Theme+MyBlog.swift</code>. If we want to generate section title in the header from the <code>SectionID</code> value, replace <code>Link(section.title</code> with <code>Link(section.id.rawValue.capitalized</code>.<br><br/></p><h3>Change how multiline blockquotes are converted into HTML</h3><p>The default logic removes newline characters and joins all lines. So, for example, the following markup:</p><pre><code>&gt; <span class="swift_type">One</span>
&gt; <span class="swift_type">Two</span>
&gt; <span class="swift_type">Three</span>
</code></pre><p>is turned into:</p><p><code>&lt;blockquote&gt;&lt;p&gt;One Two Three&lt;/p&gt;&lt;/blockquote&gt;</code> instead of:</p><p><code>&lt;blockquote&gt;&lt;p&gt;One&lt;/p&gt;&lt;p&gt;Two&lt;/p&gt;&lt;p&gt;Three&lt;/p&gt;&lt;/blockquote&gt;</code></p><p>To change this behavior, we need to modify the Ink package like <a href="https://github.com/mijo-gracanin/Ink/pull/1">this</a>. The remote dependencies are read-only and Ink is a dependency of Publish, so we need to clone both repositories and reference the local Publish package, and then in local Publish, we need to reference the local Ink package.</p><h2>Is it worth it?</h2><p>Sometimes you want to write a blog post and not wrestle with the tools, but at least you can learn something new and write about it üòâ</p>]]></content:encoded></item><item><guid isPermaLink="true">https://mijo-gracanin.github.io/posts/new-blog</guid><title>My blog has a new home</title><description>Moving from mijocoder.blogspot.com</description><link>https://mijo-gracanin.github.io/posts/new-blog</link><pubDate>Fri, 7 Jan 2022 13:13:00 +0100</pubDate><content:encoded><![CDATA[<h1>My blog has a new home</h1><p>It's time for me to start blogging again, and this is an excellent opportunity to change my blogging platform.<br>Blogspot is ok - it's feature-rich, easy to set up, and mostly easy to use.<br>I had to manually edit generated HTML several times to achieve what I wanted, and mostly I wanted a consistent look for code blocks. Since I used several languages and a few external HTML generators, I ended up with a mixture of colors and fonts. Instead of wrestling with bloated HTML, I decided to use an approach that would give me more control.<br>Oh, and there will be no cookies for visitors to accept üòä<br><br>By the way, the old posts are still up on <a href="https://mijocoder.blogspot.com">mijocoder.blogspot.com</a></p>]]></content:encoded></item></channel></rss>