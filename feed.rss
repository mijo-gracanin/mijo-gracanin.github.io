<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>MijoCoder</title><description>A personal web page of Mijo Gračanin</description><link>https://mijo-gracanin.github.io</link><language>en</language><lastBuildDate>Sat, 29 Jun 2024 14:24:29 +0200</lastBuildDate><pubDate>Sat, 29 Jun 2024 14:24:29 +0200</pubDate><ttl>250</ttl><atom:link href="https://mijo-gracanin.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://mijo-gracanin.github.io/posts/urlcache-inspection</guid><title>URLCache inspection</title><description>TIL something new about URLCache, URLSession and session delegate</description><link>https://mijo-gracanin.github.io/posts/urlcache-inspection</link><pubDate>Sat, 29 Jun 2024 17:00:00 +0200</pubDate><content:encoded><![CDATA[<h1>URLCache inspection</h1><p>Some responses should be cached to reduce network traffic, speed up an app, or support offline mode. Other responses, especially the ones that contain sensitive info, should not be cached. So it makes sense to verify what's in the URLCache. If possible, before you get a pen-test report from a third-party ;)</p><p>We can use the URLCache's <code>cachedResponse(for:)</code> API to check what is cached. But when I passed to the API the same URLRequest I passed to the <code>dataTask(with:)</code> API, I got back a <code>nil</code>.</p><p>With URLCache <code>currentMemoryUsage</code> API I confirmed that the memory usage increased, so it was time to implement <code>URLSessionDataDelegate</code> and its <code>urlSession(_:dataTask:willCacheResponse:completionHandler:)</code> method to find out what's happening. But my delegate method was not called. It turned out it wouldn't get called if the content was retrieved with <code>dataTask(with:completionHandler:)</code> or <code>dataTaskPublisher(for:)</code>. I had to use the <code>dataTask(with:)</code> API.</p><p>The delegate method revealed that the two properties of the dataTask, <code>originalRequest</code> and <code>currentRequest</code>, were not the same in my case. The <code>originalRequest</code> was the same request I used when calling the <code>dataTask(with:)</code> API, and the <code>currentRequest</code> had additional headers and was used as a key for URLCache. Those additional headers came from</p><p><code>httpAdditionalHeaders</code> property of <code>URLSessionConfiguration</code>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://mijo-gracanin.github.io/posts/manipulate-xcode-project-via-script</guid><title>Manipulate an Xcode project via script</title><description>Tips on manipulating an Xcode project via a script by using tuist/XcodeProj</description><link>https://mijo-gracanin.github.io/posts/manipulate-xcode-project-via-script</link><pubDate>Tue, 19 Mar 2024 17:00:00 +0100</pubDate><content:encoded><![CDATA[<h1>Manipulate an Xcode project via script</h1><p>One way to manipulate an Xcode project is to use <a href="https://github.com/tuist/XcodeProj">XcodeProj</a> library. It’s written in Swift and lightly abstracts a pbxproj file. I’m saying lightly because you need to be explicit about your intentions. If you want to replicate an action in Xcode, like deletion of a target, it’s not enough to just call:</p><p><code>xcodeproj.pbxproj.delete(object: target)</code></p><p>You also need to delete all other objects that depend on the target.</p><p>The safest way of using the library is to compare the diff between an action done in Xcode and the diff of the equivalent action in a script. That can be time consuming, so I’ll share a few code snippets that enabled me to automate a part my release process on one project. To achieve some other goals, maybe you can find a solution in the Issues section of project’s Github page or in the author’s <a href="https://pepicrft.me/blog/2019/03/15/xcodeproj">blog</a>.</p><pre><code><span class="comment">// How to remove a target</span>
<span class="keyword">func</span> removeTheTargetFromPbxproj() {
    <span class="keyword">guard let</span> target = xcodeproj.<span class="property">pbxproj</span>.<span class="property">nativeTargets</span>.<span class="call">first</span>(where: { $0.<span class="property">name</span> = <span class="string">"TheTarget"</span> }) <span class="keyword">else</span> { <span class="keyword">return</span> }
    target.<span class="property">buildPhases</span>.<span class="call">forEach</span> { buildPhase <span class="keyword">in
        if let</span> buildFiles = buildPhase.<span class="property">files</span> {
            buildFiles.<span class="call">forEach</span> { buildFile <span class="keyword">in
                for</span> resourceBuildPhase <span class="keyword">in</span> xcodeproj.<span class="property">pbxproj</span>.<span class="property">resourcesBuildPhases</span> {
                    <span class="keyword">if let</span> idx = resourceBuildPhase.<span class="property">files</span>?.<span class="call">firstIndex</span>(of: buildFile ) {
                        resourceBuildPhase.<span class="property">files</span>?.<span class="call">remove</span>(at: idx)
                    }
                }
                xcodeproj.<span class="property">pbxproj</span>.<span class="call">delete</span>(object: buildFile)
            }
        }
        xcodeproj.<span class="property">pbxproj</span>.<span class="call">delete</span>(object: buildPhase)
    }
    
    <span class="keyword">if let</span> configurationList = target.<span class="property">buildConfigurationList</span> {
        xcodeproj.<span class="property">pbxproj</span>.<span class="call">delete</span>(object: configurationList)
    }
    
    xcodeproj.<span class="property">pbxproj</span>.<span class="property">rootObject</span>?.<span class="property">targets</span>.<span class="call">removeAll</span>(where: { $0 == target })
    xcodeproj.<span class="property">pbxproj</span>.<span class="call">delete</span>(object: target)
}

<span class="comment">// How to remove a group with its children</span>
<span class="keyword">func</span> removeTheGroup() <span class="keyword">throws</span> {
    <span class="keyword">guard let</span> group = xcodeproj.<span class="property">pbxproj</span>.<span class="property">groups</span>.<span class="call">first</span>(where: { $0.<span class="property">path</span> == <span class="string">"pathToDelete"</span> }) <span class="keyword">else</span> { <span class="keyword">return</span> }
    
    <span class="keyword">for</span> child <span class="keyword">in</span> group.<span class="property">children</span> {
        <span class="keyword">if let</span> buildFile = xcodeproj.<span class="property">pbxproj</span>.<span class="property">buildFiles</span>.<span class="call">first</span>(where: { $0.<span class="property">file</span> == child }) {
            <span class="keyword">for</span> resourceBuildPhase <span class="keyword">in</span> xcodeproj.<span class="property">pbxproj</span>.<span class="property">resourcesBuildPhases</span> {
                <span class="keyword">if let</span> idx = resourceBuildPhase.<span class="property">files</span>?.<span class="call">firstIndex</span>(of: buildFile ) {
                    resourceBuildPhase.<span class="property">files</span>?.<span class="call">remove</span>(at: idx)
                }
            }
            xcodeproj.<span class="property">pbxproj</span>.<span class="call">delete</span>(object: buildFile)
        }
        
        xcodeproj.<span class="property">pbxproj</span>.<span class="call">delete</span>(object: child)
    }
    <span class="keyword">if let</span> parent = group.<span class="property">parent</span> <span class="keyword">as</span>? <span class="type">PBXGroup</span>, <span class="keyword">let</span> idx = parent.<span class="property">children</span>.<span class="call">firstIndex</span>(of: group) {
        parent.<span class="property">children</span>.<span class="call">remove</span>(at: idx)
    }
    
    xcodeproj.<span class="property">pbxproj</span>.<span class="call">delete</span>(object: group)
    <span class="keyword">try</span> <span class="call">deleteElementFromDisk</span>(element: group)
}

<span class="comment">// How to remove files</span>
<span class="keyword">func</span> removeExperimentalConfigFiles() <span class="keyword">throws</span> {
    <span class="keyword">let</span> groupsContaingConfigsToDelete = <span class="type">Set</span>&lt;<span class="type">String</span>&gt;([<span class="string">"Release"</span>, <span class="string">"Debug"</span>, <span class="string">"Common"</span>])
    
    <span class="keyword">for</span> group <span class="keyword">in</span> xcodeproj.<span class="property">pbxproj</span>.<span class="property">groups</span> {
        <span class="keyword">if let</span> path = group.<span class="property">path</span>, groupsContaingConfigsToDelete.<span class="call">contains</span>(path),
           <span class="keyword">let</span> parentPath = group.<span class="property">parent</span>?.<span class="property">path</span>, parentPath == <span class="string">"Config"</span> {
            
            <span class="keyword">for</span> file <span class="keyword">in</span> group.<span class="property">children</span> {
                <span class="keyword">guard let</span> path = file.<span class="property">path</span>, !path.<span class="call">hasPrefix</span>(<span class="string">"Experimental"</span>) <span class="keyword">else</span> { <span class="keyword">continue</span> }
                <span class="keyword">if let</span> idx = group.<span class="property">children</span>.<span class="call">firstIndex</span>(of: file) {
                    group.<span class="property">children</span>.<span class="call">remove</span>(at: idx)
                }
                xcodeproj.<span class="property">pbxproj</span>.<span class="call">delete</span>(object: file)
                <span class="keyword">try</span> <span class="call">deleteElementFromDisk</span>(element: file)
            }
        }
    }
}

<span class="comment">// How to add a framework</span>
<span class="keyword">func</span> addFramework(name: <span class="type">String</span>, to target: <span class="type">PBXTarget</span>) <span class="keyword">throws</span> {
    <span class="keyword">guard let</span> frameworksPhase = target.<span class="property">buildPhases</span>.<span class="call">first</span>(where: { $0.<span class="call">name</span>() == <span class="string">"Frameworks"</span> }) <span class="keyword">as</span>? <span class="type">PBXFrameworksBuildPhase</span> <span class="keyword">else</span> { <span class="keyword">return</span> }
    <span class="keyword">guard let</span> group = xcodeproj.<span class="property">pbxproj</span>.<span class="property">groups</span>.<span class="call">first</span>(where: { $0.<span class="property">name</span> == <span class="string">"Frameworks"</span> }) <span class="keyword">else</span> { <span class="keyword">return</span> }
    
    <span class="keyword">let</span> embedFrameworksPhase = {
        <span class="keyword">if let</span> phase = target.<span class="property">buildPhases</span>.<span class="call">first</span>(where: { $0.<span class="call">name</span>() == <span class="string">"Embed Frameworks"</span> }) {
            <span class="keyword">return</span> phase
        } <span class="keyword">else</span> {
            <span class="keyword">let</span> phase = <span class="type">PBXCopyFilesBuildPhase</span>(
                dstPath: <span class="string">""</span>,
                dstSubfolderSpec: .<span class="dotAccess">frameworks</span>,
                name: <span class="string">"Embed Frameworks"</span>
            )
            
            xcodeproj.<span class="property">pbxproj</span>.<span class="call">add</span>(object: phase)
            target.<span class="property">buildPhases</span>.<span class="call">append</span>(phase)
            
            <span class="keyword">return</span> phase
        }
    }()
    
    <span class="keyword">let</span> ref = <span class="type">PBXFileReference</span>(sourceTree: .<span class="dotAccess">group</span>, name: <span class="string">"</span>\(name)<span class="string">.xcframework"</span>, path: <span class="string">"../some_path/</span>\(name)<span class="string">.xcframework"</span>)
    xcodeproj.<span class="property">pbxproj</span>.<span class="call">add</span>(object: ref)
    group.<span class="property">children</span>.<span class="call">append</span>(ref)
    <span class="keyword">_</span> = <span class="keyword">try</span> frameworksPhase.<span class="call">add</span>(file: ref)
    <span class="keyword">let</span> buildFile = <span class="keyword">try</span> embedFrameworksPhase.<span class="call">add</span>(file: ref)
    buildFile.<span class="property">settings</span> = [<span class="string">"ATTRIBUTES"</span>: [<span class="string">"CodeSignOnCopy"</span>, <span class="string">"RemoveHeadersOnCopy"</span>]]
}

<span class="comment">// How to rearrange build phases</span>
<span class="keyword">func</span> makeCutomBuildPhasesExecuteLast() {
    <span class="keyword">for</span> target <span class="keyword">in</span> xcodeproj.<span class="property">pbxproj</span>.<span class="property">nativeTargets</span> {
        [<span class="string">"dSYMs upload script"</span>, <span class="string">"Copy licences"</span>]
            .<span class="call">forEach</span> { name <span class="keyword">in
                guard let</span> idx = target.<span class="property">buildPhases</span>.<span class="call">firstIndex</span>(where: { $0.<span class="call">name</span>() == name }) <span class="keyword">else</span> { <span class="keyword">return</span> }
                <span class="keyword">let</span> phase = target.<span class="property">buildPhases</span>[idx]
                target.<span class="property">buildPhases</span>.<span class="call">remove</span>(at: idx)
                target.<span class="property">buildPhases</span>.<span class="call">append</span>(phase)
            }
    }
}
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://mijo-gracanin.github.io/posts/core-data-programmatically</guid><title>CoreData without xcdatamodeld</title><description>Replacing xcdatamodeld with NSManagedObjectModel</description><link>https://mijo-gracanin.github.io/posts/core-data-programmatically</link><pubDate>Sat, 26 Nov 2022 13:00:00 +0100</pubDate><content:encoded><![CDATA[<h1>CoreData without xcdatamodeld</h1><p>CoreData model can be created programmatically with NSManagedObjectModel class.</p><p>Here is a project which demonstrates programmatic approach to CoreData: <a href="https://github.com/mijo-gracanin/CoreDataProgrammatically">Github</a></p><p>The app shows a list of shelves (master) and list of books (detail).</p><p>Here the first commit is a classic approach using an xcdatamodeld file, and the second uses NSManagedObjectModel.</p><p>Before deleting an xcdatamodeld file, it’s helpful to create ManagedObject classes by opening the xcdatamodeld file and selecting Editor &gt; Create NSManagedObject Subclass…</p><p>But why delete xcdatamodeld? I had to use ‘cmake’ and couldn’t find a way to generate an Xcode project with an xcdatamodeld file.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://mijo-gracanin.github.io/posts/blogging-with-publish</guid><title>How to create a blog with Publish</title><description>Experience in using Publish</description><link>https://mijo-gracanin.github.io/posts/blogging-with-publish</link><pubDate>Sat, 8 Jan 2022 13:14:00 +0100</pubDate><content:encoded><![CDATA[<h1>How to create a blog with Publish</h1><p>Official readme is a bit spartan, but it's enough to get started: <a href="https://github.com/JohnSundell/Publish">README.md</a> (v0.8.0)<br><br/></p><h3>The first thing that probably everyone will want to do is show the body of a section.</h3><p>For example, almost every blog has an "About" page, and that page has some title and a body. The default theme "Foundation" only shows the tile and a list of items.</p><p>The solution is to copy <code>Publish/Sources/Publish/API/Theme+Foundation.swift</code> into a new file <code>MyBlog/Sources/MyBlog/Theme+MyBlog.swift</code> and override relevant parts. For example: override method <code>makeSectionHTML(Section&lt;Site&gt;, PublishingContext&lt;Site&gt;)</code>. It's enough to replace <code>H1(section.title)</code> with <code>Div(section.body).class("content")</code>.<br><br/></p><h3>The second thing I <a href="https://github.com/mijo-gracanin/Ink/pull/1">changed</a> is the conversion of multiline blockquotes into HTML.</h3><p>The old logic removes newline characters and joins all lines. So, for example, the following markup:</p><pre><code>&gt; <span class="type">One</span>
&gt; <span class="type">Two</span>
&gt; <span class="type">Three</span>
</code></pre><br/><p>Is turned into: <code>&lt;blockquote&gt;&lt;p&gt;One Two Three&lt;/p&gt;&lt;/blockquote&gt;</code> instead of <code>&lt;blockquote&gt;&lt;p&gt;One&lt;/p&gt;&lt;p&gt;Two&lt;/p&gt;&lt;p&gt;Three&lt;/p&gt;&lt;/blockquote&gt;</code></p><p>To change this behavior, we need to modify the Ink package. To do that, we need to reference the local Publish package, and then in local Publish, we need to reference the local Ink package because the remote dependencies are read-only. (Change <code>.package(name: "Ink", url: "https://github.com/johnsundell/ink.git", from: "0.2.0"),</code> to <code>.package(path: "/path/to/Ink")</code>)</p>]]></content:encoded></item><item><guid isPermaLink="true">https://mijo-gracanin.github.io/posts/new-blog</guid><title>My blog has a new home</title><description>Moving from mijocoder.blogspot.com</description><link>https://mijo-gracanin.github.io/posts/new-blog</link><pubDate>Fri, 7 Jan 2022 13:13:00 +0100</pubDate><content:encoded><![CDATA[<h1>My blog has a new home</h1><p>It's time for me to start blogging again, and this is an excellent opportunity to change my blogging platform.<br>Blogspot is ok - it's feature-rich, easy to set up, and mostly easy to use.<br>I had to manually edit generated HTML several times to achieve what I wanted, and mostly I wanted a consistent look for code blocks. Since I used several languages and a few external HTML generators, I ended up with a mixture of colors and fonts. Instead of wrestling with bloated HTML, I decided to use an approach that would give me more control.<br>Oh, and there will be no cookies for visitors to accept 😊<br><br>By the way, the old posts are still up on <a href="https://mijocoder.blogspot.com">mijocoder.blogspot.com</a></p>]]></content:encoded></item></channel></rss>